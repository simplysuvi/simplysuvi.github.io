async function loadComponents() { try { const components = { "../components/navigation.html": "#navigation-container", "../components/footer.html": "#footer-container" }; return await ComponentLoader.initComponents(components), console.log("All components loaded successfully."), !0 } catch (error) { return console.error("Error loading components:", error), !1 } } function initDarkMode() { const darkModeToggle = document.getElementById("darkModeToggle"), mobileDarkModeToggle = document.getElementById("mobileDarkModeToggle"), sunIcon = document.querySelector(".sun-icon"), moonIcon = document.querySelector(".moon-icon"), mobileSunIcon = document.querySelector(".mobile-sun-icon"), mobileMoonIcon = document.querySelector(".mobile-moon-icon"), isDarkMode = "true" === localStorage.getItem("darkMode"); isDarkMode && (document.body.classList.add("dark-mode"), sunIcon.style.display = "none", moonIcon.style.display = "block", mobileSunIcon.style.display = "none", mobileMoonIcon.style.display = "block"); const toggleDarkMode = () => { document.body.classList.toggle("dark-mode"); const isDark = document.body.classList.contains("dark-mode"); sunIcon.style.display = isDark ? "none" : "block", moonIcon.style.display = isDark ? "block" : "none", mobileSunIcon.style.display = isDark ? "none" : "block", mobileMoonIcon.style.display = isDark ? "block" : "none", localStorage.setItem("darkMode", isDark); const notification = document.createElement("div"); notification.classList.add("site-notification"), notification.innerHTML = `\n            <div class="notification-content">\n                <div class="notification-icon">\n                    ${isDark ? moonIcon.outerHTML : sunIcon.outerHTML}\n                </div>\n                <div class="notification-text">\n                    <div class="notification-title">${isDark ? "Dark Mode" : "Light Mode"} Enabled</div>\n                    <div class="notification-message">Display settings updated</div>\n                </div>\n            </div>\n        `, document.body.appendChild(notification), setTimeout(() => { notification.classList.add("show") }, 10), setTimeout(() => { notification.classList.remove("show"), setTimeout(() => { notification.remove() }, 300) }, 3e3) }; darkModeToggle.addEventListener("click", toggleDarkMode), mobileDarkModeToggle.addEventListener("click", toggleDarkMode) } function updateActiveNavItems() { const currentPage = window.location.pathname.split("/").pop() || "index.html"; document.querySelectorAll(".menu-items span a").forEach(link => { const linkPage = link.getAttribute("href"), parentSpan = link.parentElement; linkPage === currentPage ? parentSpan.classList.add("active") : parentSpan.classList.remove("active") }), document.querySelectorAll(".mobile-nav-item").forEach(item => { const linkPage = item.getAttribute("href"); linkPage === currentPage ? item.classList.add("active") : item.classList.remove("active") }) } function initScrollEffects() { const sections = document.querySelectorAll("section"), observer = new IntersectionObserver(entries => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add("visible"); const animatedElements = entry.target.querySelectorAll(".animate-on-scroll"); animatedElements.forEach((el, index) => { setTimeout(() => { el.classList.add("visible") }, 100 * index) }) } }) }, { threshold: .1 }); sections.forEach(section => { observer.observe(section); const animatableElements = section.querySelectorAll(".site-app, .control-module, .site-card, .interest-item"); animatableElements.forEach(el => { el.classList.add("animate-on-scroll") }) }), window.addEventListener("scroll", debounce(() => { const menuBar = document.querySelector(".menu-bar"); menuBar && (window.scrollY > 20 ? menuBar.classList.add("scrolled") : menuBar.classList.remove("scrolled")) }, 50)) } function updateClock() { const timeElement = document.querySelector(".time"); if (!timeElement) return; const now = new Date, days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], day = days[now.getDay()], month = months[now.getMonth()], date = now.getDate(), year = now.getFullYear(); let hours = now.getHours(); const minutes = now.getMinutes(), ampm = hours >= 12 ? "PM" : "AM"; hours %= 12, hours = hours || 12; const dateTimeString = `${month} ${date}, ${year} ${hours}:${minutes.toString().padStart(2, "0")} ${ampm}`; timeElement.textContent = dateTimeString } function debounce(func, wait) { let timeout; return function () { const context = this, args = arguments; clearTimeout(timeout), timeout = setTimeout(() => { func.apply(context, args) }, wait) } } function initNavigation() { updateActiveNavItems() } function initSkillsProgress() { const skillItems = document.querySelectorAll(".skill-item"), observer = new IntersectionObserver(entries => { entries.forEach(entry => { if (entry.isIntersecting) { const skillItem = entry.target; skillItem.classList.add("visible"), observer.unobserve(skillItem) } }) }, { threshold: .2 }); skillItems.forEach(item => { observer.observe(item) }) } async function loadProjects() { try { const response = await fetch("../data/projects.json"); if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`); const projects = await response.json(); renderProjects(projects), initProjectCards() } catch (error) { console.error("Error loading projects:", error) } } function renderProjects(projects) { const projectsContainer = document.querySelector(".project-cards"); projectsContainer && (projectsContainer.innerHTML = "", projects.forEach(project => { const cardStyles = []; project.backgroundColor && cardStyles.push(`background-color: ${project.backgroundColor}`), project.textColor && cardStyles.push(`color: ${project.textColor}`); const notificationAttr = project.notification ? `data-notification="${project.notification}"` : "", card = document.createElement("div"); card.className = "project-card", card.id = project.id, card.setAttribute("style", cardStyles.join(";")); const textColorStyle = project.textColor ? `style="color: ${project.textColor}"` : ""; card.innerHTML = `\n            <div class="card-label" ${textColorStyle}>${project.title}</div>\n            <button class="project-expand-button">\n                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" fill="currentColor" />\n                </svg>\n            </button>\n            <div class="card-content" ${notificationAttr}>\n                <div class="card-text">\n                    <h3 ${textColorStyle}>${project.headline}</h3>\n                    <p ${textColorStyle}>${project.description}</p>\n                </div>\n                <div class="project-tech" style="display: none;">\n                    ${project.tech.map(tech => `<span>${tech}</span>`).join("")}\n                </div>\n                <div class="project-features" style="display: none;">\n                    <ul>\n                        ${project.features.map(feature => `<li>${feature}</li>`).join("")}\n                    </ul>\n                </div>\n                ${project.links ? `\n                <div class="project-links" style="display: none;">\n                    ${project.links.demo ? `<a href="${project.links.demo}" target="_blank" class="project-link demo">Demo</a>` : ""}\n                    ${project.links.github ? `<a href="${project.links.github}" target="_blank" class="project-link github">GitHub</a>` : ""}\n                </div>\n                ` : ""}\n            </div>\n        `, projectsContainer.appendChild(card) })) } function initProjectCards() { const projectCards = document.querySelectorAll(".project-card"); let modalContainer = document.querySelector(".project-modal-container"); if (!modalContainer) { modalContainer = document.createElement("div"), modalContainer.className = "project-modal-container", modalContainer.innerHTML = '\n            <div class="project-modal">\n                <div class="project-modal-content">\n                    <button class="project-modal-close">\n                        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" fill="currentColor"/>\n                        </svg>\n                    </button>\n                    <div class="project-modal-body"></div>\n                </div>\n            </div>\n        ', document.body.appendChild(modalContainer); const closeButton = modalContainer.querySelector(".project-modal-close"); closeButton.addEventListener("click", () => { closeProjectModal() }), modalContainer.addEventListener("click", e => { e.target === modalContainer && closeProjectModal() }), document.addEventListener("keydown", e => { "Escape" === e.key && modalContainer.classList.contains("active") && closeProjectModal() }) } function openProjectModal(card) { const modalBody = document.querySelector(".project-modal-body"), cardLabel = card.querySelector(".card-label").textContent, cardTitle = card.querySelector(".card-text h3").textContent; let cardDescription = "A data science project showcasing advanced analytics and machine learning techniques."; const descriptionElement = card.querySelector(".card-text p"); descriptionElement && (cardDescription = descriptionElement.textContent); let techTagsHTML = ""; const techTags = card.querySelector(".project-tech"); if (techTags) { const clonedTags = techTags.cloneNode(!0); clonedTags.style.display = "flex", techTagsHTML = `\n                <div class="project-tech-container">\n                    ${clonedTags.outerHTML}\n                </div>\n            ` } let featuresHTML = ""; const featuresElement = card.querySelector(".project-features"); if (featuresElement) { const clonedFeatures = featuresElement.cloneNode(!0); clonedFeatures.style.display = "block", featuresHTML = `\n                <div class="project-features-container">\n                    <h4>Key Features</h4>\n                    ${clonedFeatures.innerHTML}\n                </div>\n            ` } let linksHTML = ""; const linksElement = card.querySelector(".project-links"); if (linksElement) { const clonedLinks = linksElement.cloneNode(!0); clonedLinks.style.display = "flex", linksHTML = `\n                <div class="project-links-container">\n                    ${clonedLinks.innerHTML}\n                </div>\n            ` } const modalContent = `\n            <div class="project-modal-icon">\n                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" width="80" height="80">\n                    <rect width="24" height="24" rx="6" fill="#007AFF" opacity="0.2"/>\n                    <path d="M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z" fill="#007AFF"/>\n                </svg>\n            </div>\n            <h2 class="project-modal-title">${cardLabel}</h2>\n            <div class="project-modal-description">\n                <p>${cardDescription}</p>\n                ${techTagsHTML}\n                ${featuresHTML}\n            </div>\n            <div class="project-modal-setup">\n                ${linksHTML || '<button class="project-modal-action-button">View Project</button>'}\n            </div>\n        `; modalBody.innerHTML = modalContent, modalContainer.classList.add("active"), document.body.style.overflow = "hidden", setTimeout(() => { modalContainer.querySelector(".project-modal").classList.add("active") }, 10) } function closeProjectModal() { const modal = document.querySelector(".project-modal"); modal.classList.remove("active"), setTimeout(() => { document.querySelector(".project-modal-container").classList.remove("active"), document.body.style.overflow = "" }, 300) } projectCards.forEach(card => { const expandButton = card.querySelector(".project-expand-button"); card.style.cursor = "default", card.addEventListener("click", e => { if (e.target !== expandButton && !expandButton.contains(e.target)) return e.stopPropagation(), e.preventDefault(), !1 }, !0), expandButton.addEventListener("click", e => { e.stopPropagation(), openProjectModal(card) }) }) } function initSongsCarousel() { const songsData = [{ title: "Khwahish", year: "2023", image: "https://i.scdn.co/image/ab67616d0000b2731a1d9759eaefb2b53c0a9b02", spotifyUrl: "https://open.spotify.com/track/6B1nNVfJHObKAiIyC6Rlw0" }, { title: "Scientist (Unplugged)", year: "2022", image: "https://i.scdn.co/image/ab67616d0000b273e18fe158bfea496b18f9a97a", spotifyUrl: "https://open.spotify.com/track/0IbnOzTgJP8x6xbujmvVLr" }, { title: "Bayaan", year: "2021", image: "https://i.scdn.co/image/ab67616d0000b273a704d80a685e9059a8770411", spotifyUrl: "https://open.spotify.com/track/2AAjVpzQBmbnrpcHdHohrf" }], carouselContainer = document.querySelector(".songs-carousel-container"), indicatorsContainer = document.querySelector(".carousel-indicators"), prevButton = document.querySelector(".carousel-control.prev"), nextButton = document.querySelector(".carousel-control.next"); if (!(carouselContainer && indicatorsContainer && prevButton && nextButton)) return void console.error("Songs carousel elements not found"); function setCarouselHeight() { const width = carouselContainer.offsetWidth; carouselContainer.style.height = `${width}px` } songsData.forEach((song, index) => { const songCard = document.createElement("div"); songCard.className = `song-card ${0 === index ? "active" : 1 === index ? "next" : "prev"}`; const songImage = document.createElement("div"); songImage.className = "song-image", songImage.style.backgroundImage = `url(${song.image})`; const songInfo = document.createElement("div"); songInfo.className = "song-info", songInfo.innerHTML = `\n            <div class="song-title">${song.title}</div>\n            <div class="song-year">${song.year}</div>\n        `, songCard.appendChild(songImage), songCard.appendChild(songInfo), carouselContainer.appendChild(songCard); const indicator = document.createElement("div"); indicator.className = `carousel-indicator ${0 === index ? "active" : ""}`, indicatorsContainer.appendChild(indicator) }), setCarouselHeight(), window.addEventListener("resize", setCarouselHeight); let currentIndex = 0; const totalSlides = songsData.length; function updateCarousel(newIndex) { newIndex < 0 && (newIndex = totalSlides - 1), newIndex >= totalSlides && (newIndex = 0); const cards = carouselContainer.querySelectorAll(".song-card"), indicators = indicatorsContainer.querySelectorAll(".carousel-indicator"); cards.forEach(card => { card.classList.remove("active", "prev", "next") }), indicators.forEach(indicator => { indicator.classList.remove("active") }), cards[newIndex].classList.add("active"), indicators[newIndex].classList.add("active"); const prevIndex = (newIndex - 1 + totalSlides) % totalSlides; cards[prevIndex].classList.add("prev"); const nextIndex = (newIndex + 1) % totalSlides; cards[nextIndex].classList.add("next"), currentIndex = newIndex } prevButton.addEventListener("click", () => { updateCarousel(currentIndex - 1) }), nextButton.addEventListener("click", () => { updateCarousel(currentIndex + 1) }), indicatorsContainer.querySelectorAll(".carousel-indicator").forEach((indicator, index) => { indicator.addEventListener("click", () => { updateCarousel(index) }) }), setInterval(() => { updateCarousel(currentIndex + 1) }, 8e3) } async function loadTestimonials() { try { const response = await fetch("../data/testimonials.json"); if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`); const testimonials = await response.json(); renderTestimonials(testimonials) } catch (error) { console.error("Error loading testimonials data:", error) } } function renderTestimonials(testimonials) { const testimonialsContainer = document.querySelector(".testimonials-container"); if (!testimonialsContainer) return; testimonialsContainer.innerHTML = ""; const carouselHTML = '\n        <div class="testimonials-carousel">\n            <div class="testimonials-carousel-inner"></div>\n            <div class="testimonials-carousel-controls">\n                <button class="testimonial-carousel-control prev">\n                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                        <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" fill="currentColor" />\n                    </svg>\n                </button>\n                <div class="testimonial-carousel-indicators"></div>\n                <button class="testimonial-carousel-control next">\n                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                        <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z" fill="currentColor" />\n                    </svg>\n                </button>\n            </div>\n        </div>\n    '; testimonialsContainer.innerHTML = carouselHTML; const carouselInner = testimonialsContainer.querySelector(".testimonials-carousel-inner"), indicatorsContainer = testimonialsContainer.querySelector(".testimonial-carousel-indicators"); testimonials.forEach((testimonial, index) => { const testimonialCard = document.createElement("div"); testimonialCard.className = "testimonial-card", testimonialCard.id = testimonial.id, testimonialCard.style.display = 0 === index ? "block" : "none", testimonialCard.innerHTML = `\n            <div class="testimonial-content">\n                <div class="testimonial-quote">\n                    <svg class="quote-icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                        <path\n                            d="M6.5 10c-.223 0-.437.034-.65.065.069-.232.14-.468.254-.68.114-.308.292-.575.469-.844.148-.291.409-.488.601-.737.201-.242.475-.403.692-.604.213-.21.492-.315.714-.463.232-.133.434-.28.65-.35.208-.086.39-.16.539-.222.302-.125.474-.197.474-.197L9.758 4.03c0 0-.218.052-.597.144C8.97 4.222 8.737 4.278 8.472 4.345c-.271.05-.56.187-.882.312C7.272 4.799 6.904 4.895 6.562 5.123c-.344.218-.741.4-1.091.692C5.132 6.116 4.723 6.377 4.421 6.76c-.33.358-.656.734-.909 1.162C3.219 8.33 3.02 8.778 2.81 9.221c-.19.443-.343.896-.468 1.336-.237.882-.343 1.72-.384 2.437-.034.718-.014 1.315.028 1.747.015.204.043.402.063.539.017.109.025.168.025.168l.026-.006C2.535 17.474 4.338 19 6.5 19c2.485 0 4.5-2.015 4.5-4.5S8.985 10 6.5 10z"\n                            fill="currentColor" />\n                    </svg>\n                </div>\n                <p class="testimonial-text">${testimonial.text}</p>\n                <div class="testimonial-author">\n                    <div class="author-info">\n                        <h4>${testimonial.author.name}</h4>\n                        <p>${testimonial.author.position}</p><br>\n                        <p>${testimonial.author.company}</p>\n                    </div>\n                </div>\n            </div>\n        `, carouselInner.appendChild(testimonialCard); const indicator = document.createElement("div"); indicator.className = `testimonial-carousel-indicator ${0 === index ? "active" : ""}`, indicator.dataset.index = index, indicatorsContainer.appendChild(indicator) }), initTestimonialsCarousel() } function initTestimonialsCarousel() { const testimonialsContainer = document.querySelector(".testimonials-container"); if (!testimonialsContainer) return; const carouselCards = testimonialsContainer.querySelectorAll(".testimonial-card"), indicators = testimonialsContainer.querySelectorAll(".testimonial-carousel-indicator"), prevButton = testimonialsContainer.querySelector(".testimonial-carousel-control.prev"), nextButton = testimonialsContainer.querySelector(".testimonial-carousel-control.next"); if (!(carouselCards.length && indicators.length && prevButton && nextButton)) return; let currentIndex = 0; const totalSlides = carouselCards.length; function updateCarousel(newIndex) { newIndex < 0 && (newIndex = totalSlides - 1), newIndex >= totalSlides && (newIndex = 0), carouselCards.forEach(card => { card.style.display = "none" }), indicators.forEach(indicator => { indicator.classList.remove("active") }), carouselCards[newIndex].style.display = "block", indicators[newIndex].classList.add("active"), currentIndex = newIndex } prevButton.addEventListener("click", () => { updateCarousel(currentIndex - 1) }), nextButton.addEventListener("click", () => { updateCarousel(currentIndex + 1) }), indicators.forEach((indicator, index) => { indicator.addEventListener("click", () => { updateCarousel(index) }) }), setInterval(() => { updateCarousel(currentIndex + 1) }, 1e4) } async function loadExperience() { try { const response = await fetch("../data/experience.json"); if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`); const experiences = await response.json(); renderExperience(experiences) } catch (error) { console.error("Error loading experience data:", error) } } function renderExperience(experiences) { const timelineContainer = document.querySelector(".timeline"); timelineContainer && (timelineContainer.innerHTML = "", experiences.forEach(experience => { const timelineItem = document.createElement("div"); timelineItem.className = "timeline-item", timelineItem.id = experience.id, timelineItem.innerHTML = `\n            <div class="timeline-dot"></div>\n            <div class="timeline-date">\n                <span>${experience.startDate}</span>\n                <span>${experience.endDate}</span>\n            </div>\n            <div class="timeline-content site-card">\n                <div class="card-content">\n                    <div class="card-header">\n                        <h3>${experience.title}</h3>\n                        <p class="company">${experience.company}</p>\n                    </div>\n                    <div class="card-body">\n                        <ul>\n                            ${experience.responsibilities.map(responsibility => `<li>${responsibility}</li>`).join("")}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        `, timelineContainer.appendChild(timelineItem) })) } document.addEventListener("DOMContentLoaded", () => { loadComponents().then(() => { initNavigation(), initScrollEffects(), updateClock(), initDarkMode(), initSkillsProgress(), loadProjects(), loadExperience(), loadTestimonials(), initSongsCarousel(), setInterval(updateClock, 1e3) }) }), document.addEventListener("DOMContentLoaded", () => { document.querySelectorAll(".control-module").forEach(module => { module.addEventListener("click", () => { module.classList.add("active"), setTimeout(() => { module.classList.remove("active") }, 300) }) }) }), document.addEventListener("DOMContentLoaded", () => { loadProjects() }), document.addEventListener("DOMContentLoaded", () => { const style = document.createElement("style"); style.textContent = "\n        .site-notification {\n            position: fixed;\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%) translateY(-100px);\n            background-color: rgba(255, 255, 255, 0.8);\n            backdrop-filter: blur(10px);\n            -webkit-backdrop-filter: blur(10px);\n            border-radius: 14px;\n            padding: 12px 16px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n            display: flex;\n            align-items: center;\n            min-width: 300px;\n            max-width: 400px;\n            z-index: 2000;\n            transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n        }\n        \n        .site-notification.show {\n            transform: translateX(-50%) translateY(0);\n        }\n        \n        .notification-content {\n            display: flex;\n            align-items: center;\n            width: 100%;\n        }\n        \n        .notification-icon {\n            width: 40px;\n            height: 40px;\n            border-radius: 10px;\n            background-color: #FFFFFF;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-right: 12px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n        }\n        \n        .notification-icon svg {\n            width: 24px;\n            height: 24px;\n        }\n        \n        .notification-text {\n            flex: 1;\n        }\n        \n        .notification-title {\n            font-weight: 600;\n            font-size: 15px;\n            margin-bottom: 2px;\n        }\n        \n        .notification-message {\n            font-size: 13px;\n            color: #666;\n        }\n        \n        /* Dark mode styles for notifications */\n        body.dark-mode .site-notification {\n            background-color: rgba(44, 44, 46, 0.8);\n        }\n        \n        body.dark-mode .notification-icon {\n            background-color: #2C2C2E;\n        }\n        \n        body.dark-mode .notification-title {\n            color: #FFFFFF;\n        }\n        \n        body.dark-mode .notification-message {\n            color: #AEAEB2;\n        }\n        \n        .animate-on-scroll {\n            opacity: 0;\n            transform: translateY(20px);\n            transition: opacity 0.6s ease, transform 0.6s ease;\n        }\n        \n        .animate-on-scroll.visible {\n            opacity: 1;\n            transform: translateY(0);\n        }\n        \n        .control-module.active {\n            transform: scale(0.98);\n        }\n        \n        .menu-bar.scrolled {\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        }\n    ", document.head.appendChild(style) });